---
title: "PNG_2024_Leg1_MiFishE_edna_cleaning"
execute: 
  echo: false
number-sections: true
author: "Molly Timmers"
format:
     html:
       toc: true
       self-contained: true
       toc-location: left
editor_options: 
  chunk_output_type: console
---

# Libraries

```{r}
rm(list = ls())
#options(repos="https://cran.rstudio.com" )
library(tidyverse)
library(stringi)
library(stringr)
library(worrms)
library(robis)
library(rgbif)
library(EcolUtils)
library(data.table)
library(rfishbase)
library(plyr)
library(dplyr)
library(readxl)
library(rredlist)
library(devtools)
#install_github("helixcn/seqRFLP")
library(seqRFLP)
#install_version("rfishbase", version = "4.1.1", repos = "http://cran.us.r-project.org")

```

# Raw Data

```{r}
df_mifish<-read.csv("~/Google Drive/My Drive/Pristine Seas/SCIENCE/expeditions/PNG-2024/data/primary/processed/eDNA/PNG_2024_Leg1_edna_zotu_table_MiFishE.tsv",sep = "\t", check.names = T,header = T)

### Turning all NA and "dropped" from taxonomic classiciation into blanks across dataframe
df_mifish[df_mifish=="dropped"]<-""
df_mifish[is.na(df_mifish)]<-""

# Removing all non metazoans, mammal contaminants like "Hominidae", "Bovidae" and removing bait...
df_mifish2<- df_mifish %>% filter(! family %in% c("Bovidae","Canidae","Suidae","Felidae","Elephantidae","Phasianidae"))  %>%
filter(! order %in% c("Primates","Lagomorph","Squamata")) %>% 
filter (! class %in% c("Insecta","Arachnida")) %>% 
  filter (! phylum == "") %>%
  filter (kingdom == "Metazoa") %>%
### Also, any sequence only identified to phylum is out. This shouldn't be the case with vertebrates.
  filter(order != "" | family != "")

# Checking what was removed
mifish_remove<-anti_join(df_mifish, df_mifish2)

# No need for domain
df_mifish2$domain<-NULL



# After examining potential contamination issues, removing this sample which had a low number of reads (<1500) and had 80% of the reads to an hawaiian endemic.
df_mifish2<-df_mifish2 %>% 
  select(!c("PNG_2024_edna_002_10m_r1"))


```

#### Cleaning, Checking, and Removing Negatives

```{r}

df_meta<-df_mifish2[,1:14]
neg_mifish<-df_mifish2[,15:ncol(df_mifish2)] 
rownames(neg_mifish)<-df_mifish2$OTU
#Summing up all controls to subtract against data
Sum_mifish <- as.data.frame(neg_mifish %>%  select(contains(c("FN","EN","pos","neg", "positive","negative", "POS","NEG","Pos","Neg"))) %>%  rowSums())
colnames(Sum_mifish)<-"discard"


# checking the range of these values
head(Sum_mifish[order(Sum_mifish$discard, decreasing = TRUE),], 30)
# isolating the highest ones to see what OTUs they are
Sum_mifish %>%
  filter(discard == "1098") 

head(subset(df_mifish2, OTU == "Zotu156"), n=c(1,11))
t(subset(df_mifish2, OTU == "Zotu156"))


# substrating the summed negatives and positives from the dataset
neg_mifish <- neg_mifish-Sum_mifish$discard 
# Removing any negative values and singletons
neg_mifish[neg_mifish<2] <- 0

# Removing all controls                         
neg_mifish<-neg_mifish %>% select(-contains(c("EN","FN","pos","neg","Sum","postive","negative", "POS","NEG", "Pos","Neg")))
# adding back OTU column
neg_mifish$OTU<-rownames(neg_mifish)
# bringing column to front
neg_mifish <- neg_mifish %>% select("OTU", everything()) 
# Summing rows to remove all 0 values
neg_mifish$sum<-rowSums(neg_mifish[,2:ncol(neg_mifish)])
# removing rows with 0 values
neg_mifish<-subset(neg_mifish, sum > 0)
neg_mifish$sum<-NULL


```

#### Evaluating Remaining Sequences

```{r}
# Examining the sum sequences per replicate 

min(colSums(neg_mifish[,2:ncol(neg_mifish)]))
max(colSums(neg_mifish[,2:ncol(neg_mifish)]))


# Checking how many sequences are from each sample....
neg_mifish[,2:ncol(neg_mifish)] %>%
  select(where(is.numeric)) %>% 
  map_dbl(sum) %>%
  {names(.)[. <10000]}
### 49 samples are less than 10,000 sequences....

# Super low, checking original dataframe *** majority of sequences were NOT metazoans...
df_mifish[,12:ncol(df_mifish)] %>%
  select(where(is.numeric)) %>% 
  map_dbl(sum) %>%
  {names(.)[. > 25000]}

## Checking differences between
seqTotalCheck_mifish<-as.data.frame(colSums(df_mifish[,15:ncol(df_mifish)]))
colnames(seqTotalCheck_mifish)[1]<-"Total"
seqTotalCheck_mifish$MetaPlanOnly<-colSums(df_mifish[,15:ncol(df_mifish)])
seqTotalCheck_mifish$KeepPerc<-(seqTotalCheck_mifish$MetaPlanOnly/seqTotalCheck_mifish$Total) * 100
seqTotalCheck_mifish$EukBactProt<-100-seqTotalCheck_mifish$KeepPerc

mean(seqTotalCheck_mifish$KeepPerc)
mean(seqTotalCheck_mifish$EukBactProt)


```

#### Abundance Filtration

To filter or not to filter, that is the question.....

Pros: Removes spurious low quantity of sequences that may arguably not be a part of the samples. There are lots of technical constraints that inflate the presence of sequences that would not be in your samples. These include: tag jumping, contamination from lab work, etc. Consider using if you have a large difference in sequencing depth across samples - especially for Invertebrate markers - and if you find low numbers of sequences from OTUs in your negatives and in contrast find a high number of sequences of the same OTU in your samples. Similarly, if you find you have a large number of sequences and OTUs in your negatives that are present in the real samples suggesting quite a bit of contamination, then this should be done more stringently (a higher removal value) or you should consider resequencing your samples.

Cons: Could remove real sequence/organismal presence within your samples and it could remove rare species. If you are trying to detect the presence of rare species such as endangered species, don't use. In fact, if the goal of the project is species detection of any kind, skip this step.

Here we filter.

```{r}

abun_mifish<-as.data.frame(neg_mifish[,2:ncol(neg_mifish)])
rownames(abun_mifish)<-neg_mifish$OTU
total<-colSums(abun_mifish)


# converting to relative abundance
# Going with 0.05 filtration because it removed the endemic hawaiian fish that's most likely a result of contamination

rel_mifish <- as.data.frame(abun_mifish)
for (i in 1:ncol(abun_mifish))  rel_mifish[,i] <- abun_mifish[,i]/total[i] 
# modify the relative abundance value to remove below to be more or less stringent 
rel_mifish2<-as.data.frame(lapply(rel_mifish, function(x){replace(x,x <= 0.0005,0)}))
rel_mifish2$OTU<-neg_mifish$OTU
rel_mifish2 <- rel_mifish2 %>% select("OTU", everything()) 
rel_mifish2[is.na(rel_mifish2)]<- 0
rel_mifish2$Reads<-rowSums(rel_mifish2[,2:ncol(rel_mifish2)])
rel_mifish3<-subset(rel_mifish2, Reads != 0)
rel_mifish3$Reads<-NULL

#Back Calculating to whole numbers
whole_mifish<-rel_mifish3[,2:ncol(rel_mifish3)]
whole_mifish2<-whole_mifish
for (i in 1:ncol(whole_mifish))  whole_mifish2[,i] <- whole_mifish[,i]*total[i] 
whole_mifish2$OTU<-rel_mifish3$OTU
whole_mifish2 <- whole_mifish2 %>% select("OTU", everything()) 

# Start with 187 species names
# 0.0001 = 183
# 0.0005 = 179 # gets rid of the other endemic
# 0.001 = 165

#library(usefun) #outersect function

#check_0.05<-right_join(df_meta,whole_mifish2,  by = "zotu")
#outersect(check_0.05$species,df_mifish2$species)
#check_0.01<-right_join(df_meta,whole_mifish2,  by = "zotu")
#outersect(check_0.01$species,df_mifish2$species)
#check_0.1<-right_join(df_meta,whole_mifish2,  by = "zotu")
#outersect(check_0.1$species,df_mifish2$species)


```

###### Investigating Abundance Filtration results

This can help you gauge what filtration amount is reasonable given the technical constraints from the sequencer and/or contamination that could be in your sample. Based on some exploration of this and the known endemic contaminates, we chose 0.0005 (0.05%) in our abundance filtration code.

```{r}
##### What am I missing?

# Getting OTUs only from filtration output
taxaCheck<-as.data.frame(whole_mifish2$OTU)
colnames(taxaCheck)<-"OTU"

# adding taxa metadata back to original filtration input dataframe 
taxaCheck2<-right_join(df_meta,neg_mifish,  by = "OTU")

# seeing which OTUs are no longer in the original dataframe
taxaCheck3<-anti_join(taxaCheck2,taxaCheck, by = "OTU")

# which columns have the removed OTUS
datacols <- as.data.frame(which(colSums(taxaCheck3[,14:ncol(taxaCheck3)]) > 0))
datacols2<-rownames(datacols)
# Only want columns containing the removed OTUs
taxaCheck4<-subset(taxaCheck3, select=datacols2)
# Binding the species names to the columns that has the sequences
taxaCheck5<-cbind(taxaCheck3$species,taxaCheck4)
colnames(taxaCheck5)[1]<-"removed"

### If you wanna perused a specific species if there are more than one returned from your abundance filtering
sort(unique(taxaCheck5$removed))

# Getting unique names and merging it with metadata to see get more taxonomic information
removed_species_names<-unique(taxaCheck5$removed) %>%
  as.data.frame() %>%
  setNames("species") %>%
  filter(species != "dropped")

removed_species_names2<-left_join(removed_species_names, df_meta, by =  "species")

# Checking which columns
taxaCheck6<-
 filter(taxaCheck5, removed == "Tursiops aduncus" )

## This will identify which columns
 taxaCheck7<-taxaCheck6[, 2:ncol(taxaCheck6)] %>% 
   select(where(is.numeric)) %>% 
  map_dbl(sum) %>%
  {names(.)[. > 0]}
# # This then provides name of columns and number of sequences 
 select(taxaCheck6, taxaCheck7)


```

### Potential Contamination - Investigating

Samples from another project sequencing eDNA from Kaneohe Bay were placed on the same run as these samples for sequencing. It was noticed that there may have been some contamination among these two samples that were prepped by the same person for sequencing. The individual noticed that two Hawaiian endemics were present in the PNG data: Atherinomorus insularum (silverside),Sicyopterus stimpsoni(goby). This is to look at the other species from that output in relation to PNG and to see if the abundance filtration removed them.

Turns out sample PNG_2024_edna_002_10m_r1 had the most sequences from these and the majority of the sequences overall in this sample were "unidentified" Thus, this samples will be removed.

```{r}

### checking to see if removed the two hawaiian endemics that are most likely due to contamination


contamination_Check<-left_join(whole_mifish2, df_meta, by = "OTU")
contamination_Check2<-contamination_Check %>%
  filter(species %in% c("Sicyopterus stimpsoni","Atherinomorus insularum")) 

contamination_Check_col<-grepl("PNG",names(contamination_Check2))
contam_col<-contamination_Check2[,contamination_Check_col]

contam_col2<-contam_col %>% 
  select(where( ~ is.numeric(.x) && sum(.x) != 0))
colnames(contam_col2) # 3 samples have them @ 005% filtration; 9 @ 0.001% filtation

### PNG_2024_edna_002_10m_r1 has hardle any sequences, gonna remove.


# What are the other species that these two datasets have in common
cont<-read_excel("~/Documents/PS eDNA/PNG_2024/raw/eDNA/Contaminants_30Bays_zotu_table_final.xlsx", sheet = 1)

cont2<-as.data.frame(unique(cont$species))
colnames(cont2)<-"species"

samespecies<-left_join(cont2,contamination_Check, by = "species") %>%
  drop_na() %>%
    distinct(species) # 33 species in both datasets


```

#### Collapsing Taxonomic Data

To keep or not to keep ASVs, that is the question

Pros: Removes duplicated taxonomic identifications. Takes a conservative approach to biodiversity questions. zOTUs/ASVS are now more on a OTU type scale based on "taxonomy" rather than sequencing.

Cons: Duplicate IDs could be congeners without barcodes so collapseing would loose this "diversity". But this approach also tends to inflate diversity as it's more of a sequence approach based rather taxonomic.

Here we collapse data

```{r}
# If choose not to do abundance filtration, then switch whole_df with neg_df

taxcol_mifish<-right_join(df_meta,whole_mifish2,  by = "OTU")
### Removing the two Hawaiian endemics
taxcol_mifish<-taxcol_mifish %>%
  filter(!species %in% c("Atherinomorus insularum","Sicyopterus stimpsoni"))

### What are the pid's across taxa
aggregate(OTU ~ pid, data = taxcol_mifish, FUN = length)


# Collapsing  taxonomy to species and summarizing the columns - note OTU is REMOVED
collapse_mifish<- taxcol_mifish %>% 
  group_by(kingdom,phylum,class,order,family,genus,species)  %>%
            summarise_if(is.numeric, sum) 

collapse_mifish<-collapse_mifish[
  with(collapse_mifish, order(kingdom,phylum,class,order,family,genus,species)),
]  

# Removing columns with summarized info
collapse_mifish$seq_length<-NULL
collapse_mifish$unique_hits<- NULL
collapse_mifish$taxid<- NULL
collapse_mifish$hits<- NULL

# Collapsing by OTU name based on taxonomy which adds all OTUs collapse together into the OTU column for reference
names_mifish<-as.data.frame(aggregate(OTU~kingdom+phylum+class+order+family+genus+species, taxcol_mifish, toString))

names_mifish<-names_mifish[
  with(names_mifish, order(kingdom,phylum,class,order,family,genus,species)),
] 

# Adding the OTU collapsed name 
collapse_mifish$zotu_All<-names_mifish$OTU  
# Checking if there are any mislinks
check<-anti_join( collapse_mifish,names_mifish, by = c("phylum","class","order","family","genus","species"))

# Getting a column of just one OTU name rather than all of them for easier data manipulation for later
collapse_mifish$OTU<-gsub("^(.*?),.*", "\\1", collapse_mifish$zotu_All)

# Bringing columns to from
collapse_mifish <- collapse_mifish %>% select(c("zotu_All","OTU"), everything()) 

# Removing any OTU that has no order or family, it's a vertebrate marker so should have either or
collapse_mifish<- collapse_mifish %>% filter(!family == "" | !order == "") 

```

#### Rarfeying

To rarefying or not to rarefy...that is the question

Pros: Justifies comparisons across samples. A general principle of standard biodiversity surveys is that you will see more organisms the more you sample. The same is with sequencing. The samples with a deeper sequencing depth will have more "organisms". Thus, if you have interests comparing across sites, gradients, markers, etc. this should be done. In the marker comparison approach, in theory all markers should be rarefied to the same sequencing depth before evaluating their performance to make the "evaluation playing field" equal.

Cons: You may loose real taxa in some samples. However, you loose less when you collapse the taxa first.

Here we rarefy...

```{r}

# For reports, merging all surface and bottom samples together

replicateMerge_mifish<-collapse_mifish[,10:ncol(collapse_mifish)]
replicateMerge_mifish$OTU<-collapse_mifish$OTU

replicateMerge_mifish2<- replicateMerge_mifish %>% pivot_longer(cols = -OTU, names_to = "Sample", values_to = "Sequence")

replicateMerge_mifish2$Site<-sub("_[^_]+$", "",replicateMerge_mifish2$Sample)
replicateMerge_mifish2$Site<-sub("_[^_]+$", "",replicateMerge_mifish2$Site)


# Converting data  back wide to merge back the taxon data

replicateMerge_mifish3<-pivot_wider(replicateMerge_mifish2, id_cols = c(OTU),names_from = Site, values_from = Sequence, values_fn = sum)

sort(colSums(replicateMerge_mifish3[,2:ncol(replicateMerge_mifish3)]), decreasing = T)

### Rarefying Data

subsample_mifish<-as.data.frame(t(replicateMerge_mifish3[,2:ncol(replicateMerge_mifish3)]))
colnames(subsample_mifish)<-replicateMerge_mifish3$OTU
sort(rowSums(subsample_mifish))

subsample_mifish1<-rrarefy.perm(subsample_mifish,min(rowSums(subsample_mifish)), n= 100, round.out = T)
subsample_mifish1<-as.data.table(subsample_mifish1)
subsample_mifish2<-subsample_mifish1[,colSums(subsample_mifish1 != 0) > 0, with = F]
rowSums(subsample_mifish2)
rownames(subsample_mifish2)<-rownames(subsample_mifish)

# Adding some metadata to the file
replicateMerge_mifish_rare<-as.data.frame(t(subsample_mifish2))
colnames(replicateMerge_mifish_rare)<-rownames(subsample_mifish2)
replicateMerge_mifish_rare$OTU<-rownames(replicateMerge_mifish_rare)

# Merging back metadata
merged_mifish<-right_join(collapse_mifish[,1:9], replicateMerge_mifish_rare, by = "OTU")
merged_mifish$kingdom<-NULL

```

# Updating Taxonomy via Worms
Have to do this twice. The first time if identifies the mismatches. Then swap those out in the call and rerun so that all of the remaining classifications match.

```{r}

# Adding a taxon column so that worms can run through everything
 merged_mifish$taxa<-merged_mifish$species
 merged_mifish <- merged_mifish %>% select("taxa", everything()) 
 merged_mifish$taxa<-ifelse(merged_mifish$species == "", merged_mifish$genus, merged_mifish$taxa)
 merged_mifish$taxa<-ifelse(merged_mifish$species == "" & merged_mifish$genus == "", merged_mifish$family,merged_mifish$taxa)
 merged_mifish$taxa<-ifelse(merged_mifish$taxa == "", merged_mifish$order, merged_mifish$taxa)

cleanTaxa<-distinct(merged_mifish[,c("taxa","OTU")])

taxonomy_worms <- cleanTaxa$taxa %>% 
  split(ceiling(seq_along(cleanTaxa$taxa)/20)) %>% 
  furrr::future_map_dfr(worrms::wm_records_names) %>% 
  janitor::clean_names() %>% 
  filter(!is.na(scientificname)) %>% 
  mutate(rank = str_to_lower(rank),
         taxon_id = if_else(!is.na(valid_aphia_id),
                            paste0("WORMS:", valid_aphia_id),                        NA_character_)) %>% 
  select(taxa = scientificname, status, taxon_valid_name = valid_name, taxon_rank = rank, taxon_id, taxon_authority = valid_authority, kingdom, phylum, class, order, family, genus) %>% 
  distinct()

## Checking name issues
bad_names<-anti_join(unique(merged_mifish[,c("taxa")]), taxonomy_worms[,c("taxon_valid_name")], by = c("taxa" ="taxon_valid_name"))
sort(bad_names$taxa)

### A bunch of these are not marine and or have the kooky dna names..

# what are the duplicates
duped_taxa_worms <- taxonomy_worms %>% 
  janitor::get_dupes(taxa) 

deduped_taxa_worms <- duped_taxa_worms %>% 
  filter(status %in% c("accepted")) %>% 
  select(-dupe_count)

taxonomy_worms <- taxonomy_worms %>% 
  group_by(taxa) %>% 
  filter(n() <= 1) %>% # remove duplicates
  bind_rows(deduped_taxa_worms) # add deduped

setdiff(taxonomy_worms$taxon_valid_name,taxonomy_worms$taxa)


### need to rerun.....


```

#### Taxonomy one more time....

```{r}

taxonomy_worms<-as.data.frame(taxonomy_worms[,c("taxa","taxon_valid_name")])
tax_2<-left_join(merged_mifish, taxonomy_worms, by = "taxa")
tax_2<-tax_2 %>% select(c("taxon_valid_name"), everything()) 
# Removing species column and changing taxaon_valid_name column as species. Now going back and rerunning Worms to populate the correct genus, family etc., for all of the new names
tax_2$taxa<-NULL
colnames(tax_2)[1]<-"taxa"
setdiff(taxonomy_worms$taxon_valid_name,taxonomy_worms$taxa)

cleanTaxa_take2<-distinct(tax_2[,c("taxa","OTU")])

taxonomy_worms_take2 <- cleanTaxa_take2$taxa %>% 
  split(ceiling(seq_along(cleanTaxa_take2$taxa)/20)) %>% 
  furrr::future_map_dfr(worrms::wm_records_names) %>% 
  janitor::clean_names() %>% 
  filter(!is.na(scientificname)) %>% 
  mutate(rank = str_to_lower(rank),
         taxon_id = if_else(!is.na(valid_aphia_id),
                            paste0("WORMS:", valid_aphia_id),                        NA_character_)) %>% 
  select(taxa = scientificname, status, taxon_valid_name = valid_name, taxon_rank = rank, taxon_id, taxon_authority = valid_authority, kingdom, phylum, class, order, family, genus) %>% 
  distinct()


## Checking name issues
bad_names<-anti_join(unique(tax_2[,c("taxa")]), taxonomy_worms_take2[,c("taxon_valid_name")], by = c("taxa" ="taxon_valid_name"))
sort(bad_names$taxa)

# what are the duplicates
duped_taxa_worms <- taxonomy_worms_take2 %>% 
  janitor::get_dupes(taxa) 

deduped_taxa_worms <- duped_taxa_worms %>% 
  filter(status %in% c("accepted")) %>% 
  select(-dupe_count)

## Now the taxonomy is right
taxonomy_worms_take2 <- taxonomy_worms_take2 %>% 
  group_by(taxa) %>% 
  filter(n() <= 1) %>% # remove duplicates
  bind_rows(deduped_taxa_worms) # add deduped

setdiff(taxonomy_worms_take2$taxon_valid_name,taxonomy_worms_take2$taxa)

cleanTaxa_take3<-left_join(cleanTaxa_take2, taxonomy_worms_take2, by = "taxa")
# Making species column from taxon_valid_name
cleanTaxa_take3$species<-str_count(cleanTaxa_take3$taxon_valid_name, " ") > 0
cleanTaxa_take3$species<-ifelse(cleanTaxa_take3$species == T,cleanTaxa_take3$taxon_valid_name,"" )
# getting all taxonomy
cleanTaxa_take3<-cleanTaxa_take3[,c("OTU","phylum","class","order","family","genus","species","taxa")]

# Grabbing the NA's because they represent non-marine animals and the DNA barcode species names entries from genebank that have a buch of numbers
remaining_taxa<-cleanTaxa_take3%>%
  filter(is.na(phylum))
remaining_taxa<-left_join(remaining_taxa[,"OTU"], merged_mifish[,1:10], by = "OTU")
remaining_taxa$zotu_All<-NULL
remaining_taxa$kingdom<-NULL
remaining_taxa<-remaining_taxa[names(cleanTaxa_take3)]
# Worms makes Actinoptero Teleostei so need to change that from the DNA barcode taxonomy or freshwater fish taxonomy to Telesostei to match
remaining_taxa$class<-ifelse(remaining_taxa$class == "Actinopteri", "Teleostei", remaining_taxa$class)

#Removing the NA to rbind 
cleanTaxa_take3<-subset(cleanTaxa_take3, !is.na(phylum))
cleanTaxa_take4<-rbind(cleanTaxa_take3,remaining_taxa)

#Getting just the sequence data to merge back
remove_col<-c("phylum","class","order","family","genus","species","taxa")
sequence_data<-merged_mifish
sequence_data[remove_col]<-NULL

cleaned_data<-left_join(cleanTaxa_take4, sequence_data, by = "OTU")

# Adding class to sea turtles
cleaned_data$class<-ifelse(cleaned_data$order == "Testudines", "Reptilia", cleaned_data$class)


```


# Adding IUCN

```{r}
# The functions are super picky....need to get a list of species and not blanks or NA can be in that list
# Sorting the species
spp_check<- sort(unique(cleaned_data$species)[-which(unique(cleaned_data$species) %in% c(NA,""))])


# this function is grabbing the lists within lists of the crazy annoting IUCN data and needs to be within the loop. Unfortunately, if the species is not known or hasn't been reviewed for IUCN, the function iucn_status which you use after you create a list of list from your species using iucn_summary from taxize won't work because there's an NA. It's irritable. Anyway, this was the only work aronud I could make work.

get_elements <- function(x, element) {
  if(is.list(x))
  {
    if(element %in% names(x)) x[[element]]
    else lapply(x, get_elements, element = element)
  }
}

share_list = list()
for ( i in 1:length(spp_check)){
  # grabbing the iucn_summary data for each species individually 
    # even if it's NA, it will save into the sharelist
  check<-iucn_summary(spp_check[i]) 
 x<- get_elements(check, "red_list_category")
 y<-unlist(get_elements(x, "code"))
   share_list[i]<-do.call(rbind, lapply(y, data.frame))
}
# now have to convert the NA to a value cause otherwise when you unlist, it removes all the NA preventing you from merging back to the dataframe
is.na(share_list) <- lengths(share_list) == 0
# unlisting the list to a dataframe
iucn_result<-as.data.frame(unlist(share_list))
# creating a column name to then merge
colnames(iucn_result)<-"iucn_status"
# May need to add a row to the end because the last row was an NA and not added to the list in the loop
#iucn_result[nrow(iucn_result)+1,] <-NA
# adding the species data back
iucn_result$species<-spp_check

# merging to dataframe
cleaned_data<-left_join(cleaned_data, iucn_result, by = "species")
# replacing NA with 0
cleaned_data[is.na(cleaned_data) ]<- ""

cleaned_data<-cleaned_data %>% select(c("iucn_status"), everything()) 



```



# Country Records

Here I'm drawing polygons based on EEZ zone from <https://www.marineregions.org/eezsearch.php> the country and using these coordinates within GBIF and OBIS to see whether a record for these species exist within the databases acknowledging that there are a number of gaps in these databases and the species that are not found may still be there. But this is the best and most efficient way in terms of time in narrowing the process down. Unfortunately species lists do not always exists.

#### GBIF - include IUCN



```{r}


gbif<-occ_data(geometry = c(139.1, -14.85, 162.83,  2.1))

gbif2<-gbif$data
gbif3<-distinct(gbif2[,c("species")])
colnames(gbif3)[1]<-"scientificName"


```

#### OBIS

```{r}

obis<-occurrence(geometry = "POLYGON ((139.1 -14.85, 139.1 2.1, 162.83 2.1, 162.83 -14.85))", wrims = TRUE, exclude = "ON_LAND")

obis2<-distinct(obis[,c("scientificName")])

Check<-checklist(geometry = "POLYGON ((139.1 -14.85, 139.1 2.1, 162.83 2.1, 162.83 -14.85))")
Check2<-subset(Check, taxonRank == "Species")
Check3<-Check2[,c("acceptedNameUsage")]
colnames(Check3)[1]<-"scientificName"

obis_all<-distinct(rbind(obis2, Check3))

```

#### Database pooling GBIF, and OBIS

```{r}

# Merge all together and then see....
All_ids<-distinct(rbind(obis_all,gbif3))
All_ids$PNG<-"Yes"

# How many of these are listed in the database?
cleaned_data2<-left_join(cleaned_data, All_ids, by = c("species"="scientificName"))
cleaned_data2$PNG<-ifelse(is.na(cleaned_data2$PNG),"No",cleaned_data2$PNG)
cleaned_data2<-cleaned_data2 %>% select(c("PNG"), everything()) 

```

# Fishbase metadata

#### Fishbase Distributions and Habitats

This is grabbing fishbase geographical locations for fish taxa to help determine whether these species are known from the geographical area, at least the Pacific. If not, then the sequence is most likey a congener. This process also extrapolates what habitat the species live in - for fishbase habitats are split into 7 primary marine habitats:

1) Bathydemersal (living and feeding on the sea bed at depths below 200m), 
2) Bathypelagic (living and feeding in open water depths below 200m), 
3) Benthopelagic (foraging across benthic and pelagic habitats), 
4) Demersal (living and feeding near the sea bed shallower than 200m and not reef-associated),
5) Pelagic-neritic (living and feeding in the pelagic zone above a continental shelf),
6) Pelagic-oceanic (living and feeding in the pelagic zone of the open ocean) 
7) Reef-associated (living and feeding on a wave resistant feature the upper surface of which is within 0–20m of the ocean surface).

Sometimes we get freshwater species and thus I create an all encompassing
8) Brackish (estuarine, river, mangrove...)


```{r}

fish_distribution<-cleaned_data2 %>% 
  filter(class %in% c("Teleostei", "Elasmobranchii")) 

fishBaseSp<-species(fish_distribution$species)
setdiff(fish_distribution$species, fishBaseSp$Species)
# not all populated
fishBaseSpNO<-anti_join(fish_distribution, fishBaseSp, by = c("species" = "Species"))

fishBaseSp2<-fishBaseSp[,c("Species","DemersPelag","Fresh")]

# getting distribution data - function would not accept the species list from the dataframe to getting all info and narrowing it down myself.
distfish<-as.vector(fishBaseSp2$Species)
fishBaseDist<-faoareas(distfish, fields = c("Status","FAO"))

# narrowing down the distribution to Pacific
fishBaseDist2<-fishBaseDist %>%
   filter(str_detect(FAO, "Pacific"))
# selecting only species of interest
fishBaseDist3<-left_join(fishBaseSp2, fishBaseDist2, by = "Species")
#  narrowing down distributions further
fishBaseDist4<-fishBaseDist3 %>%
   filter(str_detect(FAO, "Western Central"))
#what's missing
fishBaseDist_NO<-anti_join(fishBaseDist3, fishBaseDist4, by = "Species")

# Keeping ones that are still Pacific and checking those with NA in fishbase and will make them congeners if don't match up geographically

fishBaseDist_NO$FAO<-ifelse(fishBaseDist_NO$Species == "Heteropriacanthus cruentatus", "Pacific", fishBaseDist_NO$FAO)

fishBaseDist_NO$FAO<-ifelse(fishBaseDist_NO$Species == "Aetobatus narinari", "Pacific", fishBaseDist_NO$FAO)

fishBaseDist_NO$FAO<-ifelse(fishBaseDist_NO$Species == "Sicyopterus parvei", "Pacific", fishBaseDist_NO$FAO)

fishBaseDist_NO$FAO<-ifelse(fishBaseDist_NO$Species == "Stiphodon semoni", "Pacific", fishBaseDist_NO$FAO)

fishBaseDist_NO$FAO<-ifelse(fishBaseDist_NO$Species == "Sicyopterus longifilis", "Pacific", fishBaseDist_NO$FAO)

# This one a congener
fishBaseDist_NO$FAO<-ifelse(is.na(fishBaseDist_NO$FAO), "Congener", fishBaseDist_NO$FAO)


fishBaseDist5<-rbind(fishBaseDist4,fishBaseDist_NO)
fishBaseDist6 <- fishBaseDist5[!duplicated(fishBaseDist5$Species),]

# Anything checked and not in Pacific is being removed despite that it c
# removeTaxa<-subset(fishBaseDist6, is.na(FAO))
# removeTaxa<-as.list(removeTaxa$Species)
# fishdistribution<- fishdistribution[ !fishdistribution$taxon_valid_name %in% removeTaxa, ]

fish_distribution2<-left_join(fish_distribution, fishBaseDist6, by = c("species" = "Species"))

# Merging back to main dataframe
cleaned_data3<-left_join(cleaned_data2, fish_distribution2[,c("OTU","Fresh","Status","FAO", "DemersPelag")])
cleaned_data3 <- cleaned_data3 %>% select(c("Fresh","Status", "FAO","DemersPelag"), everything()) 
# Congeners are not getting a species name anymore and just a genus
cleaned_data3$species<-ifelse(cleaned_data3$FAO == "Congener",
                  "", cleaned_data3$species)


```

#### Fishbase Habitat - continued

Many OTUs are not identified to species, thus I assigned all OTUs identified to at lease family to a habitat unless it's unknown because the family is so mixed, like Carangidae which become unknown. Any OTU ID to order and above are thrown into an unknown category.


```{r}

fish_habitat<-cleaned_data3

count(fish_habitat$family)
count(fish_habitat$DemersPelag)
 # fish_habitat %>% count(family) #60
 # fish_habitat %>% count(DemersPelag)

fish_habitatNo<-subset(fish_habitat, is.na(DemersPelag))

# adding habitat type based on families...it's coarse but mostly accurate...

## Make sure to check fish_habitatNo rbinding to ensure all is accounted for

fish_habitatNo<-fish_habitatNo %>% mutate(DemersPelag = if_else(family %in% c( "Carangidae", ""),"unknown", fish_habitatNo$DemersPelag))

fish_habitatNo<-fish_habitatNo %>% mutate(DemersPelag = if_else(genus %in% c( "Ferdauia", "Carcharhinus","Uraspis"),"reef-associated", fish_habitatNo$DemersPelag))

fish_habitatNo<-fish_habitatNo %>% mutate(DemersPelag = if_else(family %in% c("Acanthuridae","Apogonidae","Anthiadidae","Balistidae","Belonidae","Blenniidae","Bythitidae", "Caesionidae", "Chaetodontidae", "Chlopsidae","Dasyatidae", "Cichlidae", "Cirrhitidae","Diodontidae","Gobiesocidae","Gobiidae","Engraulidae","Ephippidae","Epinephelidae", "Kuhliidae", "Syngnathidae","Trichonotidae", "Callionymidae", "Hemiramphidae","Holocentridae","Kyphosidae","Labridae","Lethrinidae","Lutjanidae", "Moringuidae", "Monacanthidae","Mullidae","Mugilidae", "Muraenidae","Ophichthidae","Pempheridae","Pomacanthidae","Ostraciidae","Plotosidae", "Pomacentridae","Pinguipedidae","Priacanthidae", "Pseudochromidae","Scaridae", "Scorpaenidae","Serranidae","Soleidae","Siganidae", "Sphyraenidae","Synodontidae","Tetraodontidae","Tripterygiidae"), "reef-associated", fish_habitatNo$DemersPelag))


fish_habitatNo<-fish_habitatNo %>% mutate(DemersPelag = if_else(family %in% c( "Chiasmodontidae","Gonostomatidae", "Myctophidae", "Ophidiidae","Phosichthyidae","Gigantactinidae", "Stomiidae","Synaphobranchidae"),"bathypelagic", fish_habitatNo$DemersPelag))

fish_habitatNo<-fish_habitatNo %>% mutate(DemersPelag = if_else(family %in% c( "Exocoetidae","Istiophoridae","Nomeidae", "Scombridae","Echeneidae" ),"pelagic-oceanic", fish_habitatNo$DemersPelag))


fish_habitatNo<-fish_habitatNo %>% mutate(DemersPelag = if_else(family %in% c( "Clupeidae","Atherinidae","Triacanthodidae"),"pelagic-neritic",fish_habitatNo$DemersPelag))

fish_habitatNo<-fish_habitatNo %>% mutate(DemersPelag = if_else(family %in% c( "Eleotridae","Toxotidae","Ambassidae","Leiognathidae","Moringuidae","Anguillidae","Sillaginidae"),"Brackish",fish_habitatNo$DemersPelag))


fish_habitat2<-subset(fish_habitat, !is.na(DemersPelag))
fish_habitat3<-rbind(fish_habitat2, fish_habitatNo)
colnames(fish_habitat3)[which(names(fish_habitat3) == "DemersPelag")] <- "habitat_fishbase"

# Adding additional metadata to main file
cleaned_data4<-left_join(cleaned_data3, fish_habitat3[,c("OTU","habitat_fishbase")], by = c("OTU"))
cleaned_data4$DemersPelag<-NULL

##


```

# Fish Trophic and Common Family Names

Here I'm adding whatever trophic data we currently have for the fish species. I then assigned a common family name to those that are not present in our internal working fish trophic document. I extend common names to everything that's not a fish as well.

```{r}
trophic<-read.csv("~/Google Drive/My Drive/Pristine Seas/SCIENCE/datasets/ps-taxa-lists/Cleaned_AllFish_20240130.csv")
trophic$accepted_scientific_name<-trimws(trophic$accepted_scientific_name)
trophic$family<-trimws(trophic$family)
trophic$common_family<-trimws(trophic$common_family)
trophic<-distinct(trophic)
trophic2<-trophic[,c("accepted_scientific_name","consumer","trophic_group","detailed_trophic_group")]
trophic3 <-left_join(cleaned_data4, trophic2, by = c("species" = "accepted_scientific_name"))

trophic3<-distinct(trophic3)

### Adding common_family back into dataframe
## Make sure to check that all common families are represented
trophic4<-left_join(trophic3, unique(trophic[,c("family","common_family")]), by = "family")



# Are there any families not captured in the trophic list?
commonRemain<-subset(trophic4, is.na(common_family))
# Acropomatidae and Clupeidae
sort(unique(trophic$family)) #are not yet represented in our main document.
# Adding them

trophic4$common_family<-ifelse(trophic4$family == "Acropomatidae",
             "lanternbellies",trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$family == "Clupeidae",
             "Herring, sardines",trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$family == "Serranidae",
             "Groupers",trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$family == "Myliobatidae",
             "Eagle rays",trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$family == "Ambassidae",
             "Glassfishes",trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$family == "Sillaginidae",
             "Smelt-whitings",trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$family == "Anguillidae",
             "Freshwater eels",trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$family == "Rhyacichthyidae", "Loach gobies",trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$family == "Toxotidae", "Archerfish",trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$order == "Testudines", "Sea Turtle", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$family == "Delphinidae", "Dolphin", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$family == "Balaenopteridae", "Baleen whale", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$family == "Physeteridae", "Sperm whale", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$class == "Holothuroidea", "Sea cucumber", trophic4$common_family)

trophic4$common_family<-ifelse(trophic4$family == "Miniopteridae", "Bat", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$family == "Scincidae", "Lizard", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$family == "Clypeasteridae", "Sea urchin", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$family == "Bucerotidae", "Hornbill", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$family == "Muridae", "Rodent", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$family == "Vespertilionidae", "Bat", trophic4$common_family)
trophic4$common_family<-ifelse(trophic4$family == "Pteropodidae", "Flying Fox", trophic4$common_family)



# Doubling checking that all families are captured with a common name
commonRemain<-subset(trophic4, is.na(common_family))
unique(commonRemain$family)



```

# Cleaned MiFishE

With the cleaned file, making seperate files of the whole dataset to be applied towards exploration. This includes making a fasta file of the OTU/Sequence data which is needed for phylogenetic trees.

```{r}

# All non fish and sharks indentified to species are not in species columns because they were removed when dataframe went into fishbase. Need to add them. Going to do that by creating the species columns again based on taxa 

working<-trophic4 
  working$species<-str_count(working$taxa, " ") > 0
working$species<-ifelse(working$species == T,working$taxa,"" )
# because some of the OTUs have numbers as entered in NCBI, don't want them in the species so removing those from the species column
working$species<-ifelse(!grepl("[[:digit:]]", working$species) == T, working$species, "")


working <- select(working, OTU,common_family, phylum,class,order,family,genus,species,taxa,PNG,zotu_All,Fresh,FAO,Status, habitat_fishbase,consumer,trophic_group,detailed_trophic_group, iucn_status, everything())



### Creating a sequence file in case you want to use for phy
sequences_for_fasta<-as.data.frame(left_join(working[,c("OTU","taxa")], df_mifish[,c("OTU","sequence")], by = "OTU"))
sequences_for_fasta$taxa<-NULL
colnames(sequences_for_fasta)<-c("names","sequences")

# Just the taxonomy
taxa_table<-working[,c("OTU","common_family","phylum","class","order",
                       "family","genus","species","taxa")]

# All samples metdata
samples_metadata_data_table<-working[,c("OTU", "taxa","iucn_status", "Fresh","PNG","habitat_fishbase","consumer","trophic_group","detailed_trophic_group","Status","FAO")]

### Just the OTU table
otu_col<-grepl("PNG",names(working))
otu_table<-working[,otu_col]
otu_table$OTU<-working$OTU
otu_table <- otu_table %>% select("OTU", everything()) 
otu_table$PNG<-NULL

#### Everything together
taxa_and_metadata_by_site<-working

save(taxa_and_metadata_by_site, otu_table, samples_metadata_data_table,taxa_table, file = "~/Google Drive/My Drive/Pristine Seas/SCIENCE/expeditions/PNG-2024/data/primary/output/eDNA/PNG_2024_edna_MifishE.RData")

#write.csv(working, "~/Google Drive/My Drive/Pristine Seas/SCIENCE/expeditions/PNG-2024/data/primary/output/eDNA/PNG_2024_Leg1_taxa_by_site_MifishE.csv", row.names = F)

```
