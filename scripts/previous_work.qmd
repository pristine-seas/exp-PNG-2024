---
title: "Previous work"
number-sections: false
date: today
format: 
  html:
    self-contained: true
    code-fold: true
    toc: true
    toc-location: right
---

```{r, message = F, warning = F, fig.width = 10, fig.height = 10, echo = F}
library(paletteer)
library(sf)
library(bigrquery)
library(gt)
library(pointblank)
library(tidyverse)
library(PristineSeasR)
library(mapview)
library(highcharter)

knitr::opts_chunk$set(eval = F, warning = F, message = F, include = F, echo = F)

PristineSeasR::set_ps_paths(email = "marine.data.science@ngs.org")

exp_id <- "PNG_2024"

exp_path <- file.path(ps_science_path, "expeditions", "PNG-2024")

ps_data_path <- file.path(ps_science_path, "datasets/")

bigrquery::bq_auth(email = "marine.data.science@ngs.org")

bq_connection <- DBI::dbConnect(bigrquery::bigquery(), 
                                project = "pristine-seas")
```

This script explores any existing data from the region of interest that may be useful in expedition planning, excecution, and data analysis.

# In-water surveys

The Nature Conservancy has conducted in-water surveys in the region presumably 2006.We have the coordinates and site names for each survey site. We also have a list of fish species recorded during previous expeditions. 

```{r tnc}
tnc_sites <- readxl::read_excel(file.path(exp_path, 
                             "data/secondary/raw/",
                             "TNC_Bismark_Sea_survey_sites_2006",
                             "TNC_sites_2006_dd.xls")) |> 
  janitor::clean_names() |> 
  distinct(location, site_name, lat, lon)

tnc_sites |> 
  group_by(location) |> 
  summarise(n_sites = n_distinct(site_name)) 
```

```{r}
tmp <- tnc_sites |> 
  filter(!is.na(lat)) |> 
  st_as_sf(coords = c("lon", "lat"), crs = 4326) |> 
  group_by(site_name, location) 

mapview::mapview(tmp,
                 zcol = c(habitat = "location"), 
                 legend = TRUE,
                 col.regions = paletteer_d("wesanderson::Darjeeling1", 4),
                 map.types = c("Esri.WorldImagery"),
                 layer.name = "Habitat",
                 popup = leafpop::popupTable(tmp,
                                             zcol = c("location",
                                                      "site_name")))
```

## Fish species

```{r}
Galbraith_list <- readxl::read_excel(file.path(exp_path, 
                             "data/secondary/raw/",
                             "PNG_fish_sp_lists",
                             "Galbraith_fish_sp_list.xlsx")) |> 
  janitor::clean_names() |>
  distinct(taxa)

Jankowski_list <- readxl::read_excel(file.path(exp_path, 
                             "data/secondary/raw/",
                             "PNG_fish_sp_lists",
                             "Jankowski_fish_sp_list.xlsx")) |> 
  janitor::clean_names() |>
  distinct(taxa = species)

Allen_list <- readxl::read_excel(file.path(exp_path, 
                             "data/secondary/raw/",
                             "PNG_fish_sp_lists",
                             "Bismarck Fishlist_Gerry Allen.xls")) |> 
  janitor::clean_names() |> 
  select(taxa = x1) |> 
  filter(!str_detect(taxa, "spp.")) |> 
  distinct(taxa)

bad_taxa <- c("Cirrhilabrus walindii", "Chrysiptera parasema", "Amphiprion percular", "Cheatodontoplus mesoleucus", 
              "Parioglossus lineatus", "Plesiops coeruleolineatus", "Pleurosicya labiata", "Scolecenchelys macroptera",
              "Halidesmus scapularis")

PNG_fish_list <- bind_rows(Jankowski_list, Galbraith_list, Allen_list) |> 
  rename(taxon = taxa) |> 
  filter(!taxon %in% c("Squirrel fish 2", "Squirrel fish 1"),
         !taxon %in% bad_taxa) |> 
  mutate(taxon = str_remove_all(taxon, "\\*")) |> 
  distinct() 

# Add Gymnocranius superciliosus

PNG_fish_list <- PNG_fish_list |> 
  add_case(taxon = "Gymnocranius superciliosus") 
```

```{r}
clean_fish_names <- bdc::bdc_clean_names(PNG_fish_list$taxon) %>% 
  janitor::clean_names() %>% 
  select(taxon = scientific_name, 
         taxon_clean = names_clean) %>% 
  mutate(taxon_clean = coalesce(taxon_clean, 
                                taxadb::clean_names(taxon, lowercase = F))) %>% 
  distinct(taxon, taxon_clean)

PNG_fish_list <- PNG_fish_list |> 
  left_join(clean_fish_names) |> 
  select(taxon, taxon_clean)
```

How many are not in our DB?

```{r}
fish_lut <- read_csv(file.path(ps_science_path, 
                               "projects/prj-legacy-db/data/processed/",
                               "fish_lut_pacific.csv"))

PNG_fish_list <- PNG_fish_list |> 
  filter(!(taxon %in% fish_lut$accepted_scientific_name |
           taxon %in% fish_lut$original_scientific_name))
```

Are these really not in our DB or are their names just wrong? Let's look

```{r gnr}
gnr <-  taxize::gnr_resolve(PNG_fish_list$taxon_clean, 
                            canonical = F,
                            with_canonical_ranks = T,
                            data_source_ids = c(9)) %>% # Worms = 9
  filter(submitted_name != matched_name2) %>% 
  distinct(submitted_name, score, taxon_gnr = matched_name2) 

gnr_dupes <- gnr |> 
  janitor::get_dupes(submitted_name)

keep <- c("Gymnothorax rueppelliae", "Cantherines fronticinctus", "Atherinomorus endrachtensis", "Monodactylus argenteus", "Petroscirtes thepassii", "Archamia zosterophora", "Chaetodon plebelus", "Chaetodon baronessa", "Chaetodon melannotus", "Chaetodon rafflesii","Chaetodon vagabundus", "Chaetodontoplus mesoleucus", "Ctenochaetus tominiensis","Halichoeres purpurascens", "Labroides dimidiatus", "Moringua bicolor", "Moringua microchir", "Priolepis pallidicincta", "Pseudobalistes flavimarginatus", "Pseudocheilinus hexataenia","Sufflamen chrysopterum")

gnr_clean_dupes <- gnr_dupes |> 
  filter(taxon_gnr %in% keep) |> 
  select(submitted_name, score, taxon_gnr) 

gnr <- gnr |> 
  filter(!submitted_name %in% gnr_dupes$submitted_name) |> 
  bind_rows(gnr_clean_dupes)

PNG_fish_list <- PNG_fish_list |> 
  left_join(gnr,
            by = c("taxon_clean" = "submitted_name")) |> 
  mutate(taxon_gnr = coalesce(taxon_gnr, taxon_clean)) 

PNG_fish_list |> 
  filter(taxon != taxon_gnr)

PNG_fish_list$taxon_gnr[PNG_fish_list$taxon == "Labrichtys unilatus"] <- "Labrichthys unilineatus"

PNG_fish_list$taxon_gnr[PNG_fish_list$taxon == "Chromis parasema"] <- "Chrysiptera parasema"

PNG_fish_list$taxon_gnr[PNG_fish_list$taxon == "Scomberomorus commrsonnianus"] <- "Scomberomorus commerson"
```

Now we'll query the WORMS database against those names

```{r worms_names}
worms_names <- PNG_fish_list$taxon_gnr %>% 
  split(ceiling(seq_along(PNG_fish_list$taxon_gnr)/20)) %>% 
  furrr::future_map_dfr(worrms::wm_records_names) %>% 
  janitor::clean_names() |> 
  filter(!is.na(scientificname)) |> 
  select(taxon_gnr = scientificname, status, taxon_valid_name = valid_name) |> 
  distinct()

duped_worms_names <- worms_names %>% 
  janitor::get_dupes(taxon_gnr)

deduped_worms_names <- duped_worms_names %>% 
  filter(status %in% c("accepted")) %>% 
  select(-dupe_count)

worms_names <- worms_names %>% 
  group_by(taxon_gnr) %>% 
  filter(n() <= 1) %>% # remove duplicates
  bind_rows(deduped_worms_names)

PNG_fish_list <- PNG_fish_list |> 
  left_join(worms_names)  |> 
  mutate(status = if_else(status == "accepted" & 
                            taxon != taxon_valid_name, 
                          "misspelled",
                          status)) |> 
  select(taxon, status, taxon_valid_name)
```

Now, let's cross check once again with our DB

```{r}
PNG_fish_list <- PNG_fish_list |> 
  filter(!(taxon_valid_name %in% fish_lut$accepted_scientific_name |
           taxon_valid_name %in% fish_lut$original_scientific_name))

PNG_fish_list <- PNG_fish_list |>
  filter(taxon != "Opistognathus wassi")

PNG_fish_list |> 
  filter(str_count(taxon_valid_name, '\\w+') == 1)
```

Now let's create codes for them....

```{r}
PNG_fish_list <- PNG_fish_list |> 
  mutate(taxon_code = case_when(str_count(taxon_valid_name, '\\w+') == 1 ~
                                  str_to_upper(paste(str_sub(taxon_valid_name, 1, 4),
                                                     "SP", sep = ".")),
                                      TRUE ~ str_to_upper(paste(str_sub(word(taxon_valid_name, 1), 1, 2), 
                                                                str_sub(word(taxon_valid_name, 2), 1, 4),
                                                                sep = ".")))) |> 
  select(taxon_code, taxon, taxon_valid_name)

taken_codes <- PNG_fish_list |> 
  filter(taxon_code %in% fish_lut$taxon_code)

write_csv(taken_codes, 
          file.path(exp_path, "data/primary/raw/fish/already_taken_codes.csv"))

new_codes <- read_csv(file.path(exp_path, "data/primary/raw/fish/new_codes.csv"))

additional_taxa <- PNG_fish_list |> 
  filter(!taxon_code %in% fish_lut$taxon_code) |> 
  bind_rows(new_codes)
```

```{r}
additional_taxa |> 
  janitor::get_dupes(taxon_code) 

additional_taxa$taxon_code[additional_taxa$taxon == "Cephalopholis aurantia"] <- "CE.AURAN"
additional_taxa$taxon_code[additional_taxa$taxon == "Cheilodipterus parazonatus"] <- "CH.PARAZ"
```

```{r taxonomy}
taxonomy_worms <- additional_taxa$taxon_valid_name %>% 
  split(ceiling(seq_along(additional_taxa$taxon_valid_name)/20)) %>% 
  furrr::future_map_dfr(worrms::wm_records_names) %>% 
  janitor::clean_names() %>% 
  filter(!is.na(scientificname)) %>% 
  mutate(rank = str_to_lower(rank),
         taxon_id = if_else(!is.na(valid_aphia_id),
                            paste0("WORMS:", valid_aphia_id),
                            NA_character_)) %>% 
  select(taxon_valid_name = scientificname, status, taxon_rank = rank, taxon_id, taxon_authority = valid_authority, kingdom, phylum, class, order, family, genus) %>% 
  distinct()

duped_taxonomy <- taxonomy_worms %>% 
  janitor::get_dupes(taxon_valid_name) 

deduped_taxonomy <- duped_taxonomy %>% 
  filter(status %in% c("accepted")) %>% 
  select(-dupe_count)

taxonomy_worms <- taxonomy_worms %>% 
  group_by(taxon_valid_name) %>% 
  filter(n() <= 1) %>% # remove duplicates
  bind_rows(deduped_taxonomy)  # add deduped

additional_taxa <- additional_taxa |> 
  left_join(taxonomy_worms)

additional_taxa
```

Now let's bring in the LW parameters from fishbase. 

```{r}
fishbase_params <- additional_taxa %>% 
  pull(taxon_valid_name) %>% 
  split(ceiling(seq_along(additional_taxa$taxon_valid_name)/20)) %>% 
  furrr::future_map_dfr(rfishbase::estimate) %>% 
  janitor::clean_names() %>% 
  select(fb_taxa_code = spec_code, species, lmax = max_length_tl, trophic_level = troph, a, b) %>% 
  distinct()

additional_taxa <- additional_taxa |> 
  left_join(fishbase_params, 
            by = c("taxon_valid_name" = "species")) 

additional_taxa |> 
  filter(is.na(a))
```
It's only a few, let's inspect them further

```{r}
# Pseudanthias smithvanizi

additional_taxa$a[additional_taxa$taxon_code == "PS.SMIT"] <- 0.0123027
additional_taxa$b[additional_taxa$taxon_code == "PS.SMIT"] <- 3
additional_taxa$lmax[additional_taxa$taxon_code == "PS.SMIT"] <- 9.5
additional_taxa$trophic_level[additional_taxa$taxon_code == "PS.SMIT"] <- 3.4
additional_taxa$fb_taxa_code[additional_taxa$taxon_code == "PS.SMIT"] <- 7460

# Cromileptes altivelis	

additional_taxa$a[additional_taxa$taxon_code == "CR.ALTI"] <- 0.01349
additional_taxa$b[additional_taxa$taxon_code == "CR.ALTI"] <- 3.12
additional_taxa$lmax[additional_taxa$taxon_code == "CR.ALTI"] <- 70
additional_taxa$trophic_level[additional_taxa$taxon_code == "CR.ALTI"] <- 4.5
additional_taxa$fb_taxa_code[additional_taxa$taxon_code == "CR.ALTI"] <- 6457
  
# Pseudanthias lori	 (Pyronotanthias lori)

additional_taxa$a[additional_taxa$taxon_code == "PS.LORI"] <- 0.0123027
additional_taxa$b[additional_taxa$taxon_code == "PS.LORI"] <- 3
additional_taxa$lmax[additional_taxa$taxon_code == "PS.LORI"] <- 12
additional_taxa$trophic_level[additional_taxa$taxon_code == "PS.LORI"] <- 3.4
additional_taxa$fb_taxa_code[additional_taxa$taxon_code == "PS.LORI"] <- 7456

# Pseudanthias parvirostris	

additional_taxa$a[additional_taxa$taxon_code == "PS.PARV"] <- 0.0123027
additional_taxa$b[additional_taxa$taxon_code == "PS.PARV"] <- 3
additional_taxa$lmax[additional_taxa$taxon_code == "PS.PARV"] <- 9.15
additional_taxa$trophic_level[additional_taxa$taxon_code == "PS.PARV"] <- 3.34
additional_taxa$fb_taxa_code[additional_taxa$taxon_code == "PS.PARV"] <- 25682

# Trimma macrophthalmum	

additional_taxa$a[additional_taxa$taxon_code == "TR.MACR"] <- 0.0102329
additional_taxa$b[additional_taxa$taxon_code == "TR.MACR"] <- 3.02
additional_taxa$lmax[additional_taxa$taxon_code == "TR.MACR"] <- 2.5
additional_taxa$trophic_level[additional_taxa$taxon_code == "TR.MACR"] <- 3
additional_taxa$fb_taxa_code[additional_taxa$taxon_code == "TR.MACR"] <- 26320

# 

additional_taxa <- additional_taxa |> 
  mutate(lw_source = "Fishbase",
         ltl_ratio = 1,
         lmax_source = "Fishbase")

additional_taxa <- additional_taxa |> 
  rename(original_scientific_name = taxon, 
         accepted_scientific_name = taxon_valid_name,
         worms_id = taxon_id,
         fishbase_id = fb_taxa_code) 

additional_taxa |> 
  janitor::get_dupes(taxon_code)
```

```{r}
additional_taxa |> 
  mutate(common_family = NA, consumer = NA, trophic_group = NA, detailed_trophic_group = NA) |> 
  arrange(taxon_code) |> 
  write_csv(file.path(exp_path, "data/primary/processed/fish/additional_taxa.csv"))
```

```{r}
# The remaining data gaps will be imputed at the genus level after we bind the png additional taxa with our Pacific database

full_fish_lut <- additional_taxa |> 
  select(any_of(colnames(fish_lut))) |> 
  bind_rows(fish_lut) |> 
  arrange(taxon_code)

full_fish_lut |> 
  janitor::get_dupes(taxon_code)

write_csv(full_fish_lut, 
          file.path(exp_path, "data/primary/processed/fish/full_fish_lut_with_png.csv"))
```

##  Coral species

```{r}
PNG_coral_list <- readxl::read_excel(file.path(exp_path, 
                             "data/secondary/raw/",
                             "PNG_Coral_Species_List_AJKM.xlsx"),) |> 
  janitor::clean_names() |> 
  mutate(taxon = str_remove_all(taxon, 
                                "Family|Genus|Gray, 1847"),
         taxon = str_trim(str_squish(taxon)))


clean_corals <- bdc::bdc_clean_names(PNG_coral_list$taxon) %>% 
  janitor::clean_names() %>% 
  select(taxon = scientific_name, 
         taxon_clean = names_clean) %>% 
  mutate(taxon_clean = coalesce(taxon_clean, 
                                taxadb::clean_names(taxon, lowercase = F))) %>% 
  distinct(taxon, taxon_clean)

clean_corals$taxon_clean[clean_corals$taxon == "Acropora wallaceae"] <- "Acropora wallaceae"

clean_corals |> 
  filter(taxon != taxon_clean)

gnr_corals <-  taxize::gnr_resolve(clean_corals$taxon_clean, 
                            canonical = F,
                            with_canonical_ranks = T,
                            data_source_ids = c(9)) %>% # Worms = 9
  filter(submitted_name != matched_name2) %>% 
  distinct(submitted_name, score, taxon_gnr = matched_name2) 

gnr_corals <- gnr_corals |>
  filter(!taxon_gnr %in% c("Acropora papillosa",
                           "Cyphastraea chalcidicum"))

clean_corals <- clean_corals |> 
  left_join(gnr_corals,
            by = c("taxon_clean" = "submitted_name")) |> 
  mutate(taxon_gnr = coalesce(taxon_gnr, taxon_clean))

clean_corals <- clean_corals |> 
  select(-score)
  
clean_corals |> 
  filter(taxon_gnr != taxon)
```

```{r}
worms_corals <- clean_corals$taxon_gnr %>% 
  split(ceiling(seq_along(clean_corals$taxon_gnr)/20)) %>% 
  furrr::future_map_dfr(worrms::wm_records_names) %>% 
  janitor::clean_names() |> 
  filter(!is.na(scientificname)) |> 
  select(taxon_gnr = scientificname, status, taxon_valid_name = valid_name) |> 
  distinct()

duped_worms_names <- worms_corals %>% 
  janitor::get_dupes(taxon_gnr)

deduped_worms_names <- duped_worms_names %>% 
  filter(status %in% c("accepted", "misspelling - incorrect subsequent spelling",
                       "incorrect grammatical agreement of specific epithet") |
           taxon_valid_name == "Montipora carinata") %>% 
  select(-dupe_count)

worms_corals <- worms_corals %>% 
  group_by(taxon_gnr) %>% 
  filter(n() <= 1) %>% # remove duplicates
  bind_rows(deduped_worms_names)

clean_corals <- clean_corals |> 
  left_join(worms_corals)  |> 
  mutate(status = if_else(status == "accepted" & 
                            taxon != taxon_valid_name, 
                          "misspelled",
                          status)) |> 
  select(taxon, status, taxon_valid_name)

clean_corals |>
  filter(is.na(taxon_valid_name))
```

```{r taxonomy}
taxonomy_worms <- clean_corals$taxon_valid_name %>% 
  split(ceiling(seq_along(clean_corals$taxon_valid_name)/50)) %>% 
  furrr::future_map_dfr(worrms::wm_records_names) %>% 
  janitor::clean_names() %>% 
  filter(!is.na(scientificname)) %>% 
  mutate(rank = str_to_lower(rank),
         taxon_id = if_else(!is.na(valid_aphia_id),
                            paste0("WORMS:", valid_aphia_id),
                            NA_character_)) %>% 
  select(taxon_valid_name = scientificname, status, taxon_rank = rank, taxon_id, taxon_authority = valid_authority, kingdom, phylum, class, order, family, genus) %>% 
  distinct()

duped_taxonomy <- taxonomy_worms %>% 
  janitor::get_dupes(taxon_valid_name) 

deduped_taxonomy <- duped_taxonomy %>% 
  filter(status %in% c("accepted"),
         kingdom != "Chromista",
         taxon_rank != "class",
         taxon_id != "WORMS:1725674") %>% 
  select(-dupe_count)

deduped_taxonomy |> janitor::get_dupes(taxon_valid_name)

taxonomy_worms <- taxonomy_worms %>% 
  group_by(taxon_valid_name) %>% 
  filter(n() <= 1) %>% # remove duplicates
  bind_rows(deduped_taxonomy)  # add deduped

clean_corals <- clean_corals |> 
  left_join(taxonomy_worms)

clean_corals |> 
  write_csv(file.path(exp_path, "data/secondary/processed/corals_lookup.csv"))
```

```{r}
worrms::wm_records_names("Montipora corbettensis")

```

# Bathymetry

```{r}

png_eez <- sf::st_read(file.path(ps_data_path, 
                                   "marine-regions/World_EEZ_v12_20231025_gpkg/eez_v12.gpkg")) |> 
  janitor::clean_names() |> 
  filter(iso_sov1 == "PNG") |> 
  select(mrgid, geoname, pol_type, mrgid_ter1, territory1, iso_ter1, 
         mrgid_sov1, sovereign1, iso_sov1, mrgid_eez, area_km2) |> 
  wdpar::st_repair_geometry(geometry_precision = 1500)

# NOAA DEM

NOAA_dem <- raster::raster(file.path(exp_path, 
                                 "data/secondary/raw/",
                                 "noaa-dem-global-mosaic", "noaa_dem_global_mosaic_bismark_sea.tiff"))

PNG_NOAA_dem <- raster::crop(NOAA_dem, 
                             sf::st_bbox(png_eez, crs = 4326)) |> 
  raster::mask(png_eez, inverse = F)
 
PNG_NOAA_dem |> 
  raster::writeRaster(file.path(exp_path, "data/primary/processed/png_NOAA_dem.tif"))

# GMRT 

gmrt <- raster::raster(file.path(exp_path, 
                                 "data/secondary/raw/",
                                 "GMRTv4_2_1_20240720topo.tif"))

png_eez_gmrt <- raster::crop(gmrt, 
                             sf::st_bbox(png_eez, crs = 4326)) |> 
  raster::mask(png_eez, inverse = F)


png_eez_gmrt |> 
  raster::writeRaster(file.path(exp_path, "data/primary/processed/png_eez_gmrt.tif"))
```

